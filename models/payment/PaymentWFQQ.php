<?php

/**
 * 智付平台
 *
 */
class PaymentWFQQ extends BasePlatform {

    public $successMsg = 'SUCCESS';
    public $signColumn = 'sign';
    public $accountColumn = 'merchant_code';
    public $orderNoColumn = 'order_no';
    public $paymentOrderNoColumn = 'trade_no';
    public $successColumn = 'trade_status';
    public $successValue = 'SUCCESS';
    public $amountColumn = 'orginal_money';
    public $bankNoColumn = 'bank_seq_no';
    public $unSignColumns = [ 'sign_type', 'sign'];
    public $serviceOrderTimeColumn = 'trade_time';
    public $queryResultColumn = 'trade_status';
    //商家私钥，由RSA-S密钥对生成工具生成(merchant private key,generated by the key pair generate tools for RSA-S)
    private $priKey = '-----BEGIN PRIVATE KEY-----
MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAKdJN9sJjiy8ABtr
jdVW3sD1vyjbrJ7L63PYwHylRrxAR7K2umkaB734rMSPotfZ1d6M09eHnLyBBZhg
eaxoiwt45JAGlss6yNxbdItmXsXhw0Jpqgw8egrBz7YBkIy5lFY+N7gdABbSnDW+
sOMPAC/zwV7HR1CRGtUX8QKYPss7AgMBAAECgYBEidATsweINoKIuXlD9jKPtl/a
up4v9XaDYUQEDac8i82UYB9h3mNbpx4J7puWek6QvvwwawSBiw8iziwrwi1tHTh9
8v1V4D0pnbANvGtZW3ukmXM+aRng8TVJflml4WnmyFaU5C1wR+oypqReWDlwePIG
VWYof8goNwttLIaLYQJBANS1dzR2oFDq56vqNO0RPun43k0y4cEyhqIAhmPUX0YR
BzSqThsXgVD7LtDnTRd0uD7Lx3OZKjPc62FqnJNEjssCQQDJVSLproNRVxZ+up1J
4SLe/g43tyaM24NyTj/utPBgDlBhHCzqTvnPq6lmocWEc4VWQxABYwWsIVbbffpS
oDdRAkAmNE2ry56xye9AbnmBFvbg2UU8QmZP5/5MfKGmro9KK2bK68fJj+g3HlZj
SRgMnXc2OC2jsp/k3socHiTvQoIPAkBIGpyBUkWnaOgehNj175JciGIxI//DbI5b
7phI9jYsQJQa40tWsugWruThY8hoUjMLnMLrrDoI1nvT6f8vfj+xAkEAiQ8RwtPE
MyEMkaHMKpie4+MbXB7xJcwI5pNW5hFM3bAC3+0VbKpwYS0OHWjs+k1FLbXmOnsA
fF2yWwUHV31Z1A==
-----END PRIVATE KEY-----';
//智付公钥，每个商家对应一个固定的智付公钥，即为商家后台"公钥管理"->"智付公钥"里的内容
//Dinpay public key,every merchant has a unique Dinpay public key,you can find it on our merchant system,Pay Management - > Public Key - >Dinpay Public Key.
    private $pubKey = '-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCJpHOpncUs5ADItJQYrsH/Al
ZP1wDup7oQ9dWgcKNXoaImhAKaYIoqYxQNljmOdlRhGga65e+V2+15XSBhMDJS
u8hp/EZtdkw+VBsOAS17qWQAMe7YukwV0b8Uu3hiKbia+YypmWpJZbnZ/S562h
babCThhfR36kVrfOUH7CBO6QIDAQAB 
-----END PUBLIC KEY-----';

    public function compileSign($oPaymentAccount, $aInputData, $aNeedKeys = []) {
        ksort($aInputData);
//            pr($aInputData);
        $aInputValues = [];
        $sQueryString = '';
        $sForSafe = '';
        foreach ($aInputData as $key => $value) {
            if ($aNeedKeys) {
                if (!in_array($key, $aNeedKeys)) {
                    continue;
                }
            }
            if (!empty($value)) {
                $aInputValues[] = "$key=$value";
            }
        }
        $sQueryString = implode('&', $aInputValues);
        $priKey = openssl_get_privatekey($this->priKey);
        openssl_sign($sQueryString, $sign_info, $priKey, OPENSSL_ALGO_MD5);
        return base64_encode($sign_info);
    }

    public function compileSignReturn($oPaymentAccount, $aInputData, $aNeedKeys = []) {
        $aNeedKeys = ['bank_seq_no', 'extra_return_param', 'interface_version', 'merchant_code', 'notify_id', 'notify_type', 'order_amount', 'order_no', 'order_time', 'trade_no', 'trade_status', 'trade_time'];
        ksort($aInputData);
//            pr($aInputData);
        $aInputValues = [];
        $sQueryString = '';
        $sForSafe = '';
        foreach ($aInputData as $key => $value) {
            if ($aNeedKeys) {
                if (!in_array($key, $aNeedKeys)) {
                    continue;
                }
            }
            if (!empty($value)) {
                $aInputValues[] = "$key=$value";
            }
        }
        $dinpaySign = base64_decode($aInputData["sign"]);
        $sQueryString = implode('&', $aInputValues);
        $dinpay_public_key = openssl_get_publickey($this->pubKey);
        return openssl_verify($sQueryString, $dinpaySign, $dinpay_public_key, OPENSSL_ALGO_MD5);
    }

    public function & compileInputData($oPaymentPlatform, $oPaymentAccount, $oDeposit, $oBank, & $sSafeStr) {
        $data = $aInputData = [
//            'input_charset' => 'UTF-8',
            'interface_version' => 'V3.1',
            'merchant_code' => $oPaymentAccount->account,
            'notify_url' => $oPaymentPlatform->notify_url,
            'order_amount' => $oDeposit->amount,
            'order_no' => $oDeposit->order_no,
            'order_time' => date('Y-m-d H:i:s'),
            'product_name' => 'Vitrual' . intval(mt_rand(1, 99999)),
//            'product_desc' => '',
//            'extra_return_param' => '',
//            'product_num' => '',
//            'product_code' => '',
//            'extend_param' => '',
//            'return_url' => $oPaymentPlatform->return_url, // 可选，同步回调地址
            'service_type' => 'tenpay_scan',
            'client_ip' => get_client_ip(),
        ];
        $data['sign'] = $sSafeStr = $this->compileSign($oPaymentAccount, $data);
        $data['sign_type'] = 'RSA-S';

        return $data;
    }

    public function & compileQueryData($oPaymentAccount, $sOrderNo, $sServiceOrderNo) {
        $data = $aInputData = [
            'service_type' => 'single_trade_query',
            'merchant_code' => $oPaymentAccount->account,
            'interface_version' => 'V3.0',
            'order_no' => $sOrderNo,
        ];
        empty($sServiceOrderNo) or $data['trade_no'] = $sServiceOrderNo;
//        pr($oPaymentAccount->toArray());
//        exit;
        $data['sign'] = $this->compileSign($oPaymentAccount, $data);
        $data['sign_type'] = 'MD5';
//        pr($data);
        return $data;
    }

    public function compileQueryUrl($data) {
        $aQueryStr = [];
        $aNeed = [
            'service_type',
            'merchant_code',
            'interface_version',
            'sign_type',
            'sign',
            'order_no'
        ];
//        $aQueryStr[] = $key . '=' . $value;
        foreach ($aNeed as $key) {
            $aQueryStr[] = $key . '=' . $data[$key];
        }
        return $oPaymentPlatform->query_url . '?' . implode('&', $aQueryStr);
    }

    /**
     * Query from Payment Platform
     * @param PaymentPlatform $oPaymentPlatform
     * @param string $sOrderNo
     * @param string $sServiceOrderNo
     * @param array & $aResonses
     * @return integer | boolean
     *  1: Success
     *  -1: Query Failed
     *  -2: Parse Error
     *  -3: Sign Error
     *  -4: Unpay
     *  -5: Amount Error
     */
    public function queryFromPlatform($oPaymentPlatform, $oPaymentAccount, $sOrderNo, $sServiceOrderNo = null, & $aResonses) {
        $data = $this->compileQueryData($oPaymentAccount, $sOrderNo, $sServiceOrderNo);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $oPaymentPlatform->getQueryUrl($oPaymentAccount));
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); //将数据传给变量
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); //取消身份验证
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        $response = curl_exec($ch); //接收返回信息
        file_put_contents('/tmp/zf_' . $sOrderNo, $response);
        if (curl_errno($ch)) {//出错则显示错误信息
            print curl_error($ch);
        }

        curl_close($ch); //关闭curl链接
//        var_dump($response);
        if ($response === '') {     // query failed
            return self::PAY_QUERY_FAILED;
        }
        $resParser = xml_parser_create();
        if (!xml_parse_into_struct($resParser, $response, $values, $index)) {   // parse error
            return self::PAY_QUERY_PARSE_ERROR;
        }
//            pr($values);
//            pr($index);
        $aResonses = [];
        foreach ($values as $aInfo) {
            if ($aInfo['type'] != 'complete') {
                continue;
            }
            $aResonses[strtolower($aInfo['tag'])] = $aInfo['value'];
        }
//        pr($aResonses);
//        exit;
        if ($aResonses['is_success'] == 'F') {      // NO ORDER
            return self::PAY_NO_ORDER;
        }
        $sDinpaySign = $aResonses['sign'];
        $sDinpaySignType = $aResonses['sign_type'];
        unset($aResonses['sign'], $aResonses['sign_type']);
//        pr($aResonses);
        $aNeed = [
            'merchant_code', 'order_no', 'order_time', 'order_amount', 'trade_no', 'trade_time', 'trade_status'
        ];
        $sign = $this->compileSign($oPaymentPlatform, $aResonses, $aNeed);
//        pr($sign);
//        pr($sDinpaySign);
//        exit;
//            $sign         = md5($sQueryString . '&key=' . $sMerchantKey);
//        pr($sign);
        if ($sign != $sDinpaySign) {
            return self::PAY_SIGN_ERROR;
        }

        switch ($aResonses['trade_status']) {
            case 'UNPAY':
                return self::PAY_UNPAY;
            case 'SUCCESS':
//                if ($aResonses['order_amount'] != $oDeposit->amount) {
//                    return self::PAY_AMOUNT_ERROR;
//                }
                return self::PAY_SUCCESS;
        }
//        return $aResonses['is_success'] == 'T' && $aResonses['trade_status'] == 'SUCCESS';
//        exit;
    }

    public static function & compileCallBackData($data, $ip) {
        $aData = [
            'order_no' => $data['order_no'],
            'service_order_no' => $data['trade_no'],
            'merchant_code' => $data['merchant_code'],
            'amount' => $data['order_amount'],
            'ip' => $ip,
            'status' => DepositCallback::STATUS_CALLED,
            'post_data' => var_export($data, true),
            'callback_time' => time(),
            'callback_at' => date('Y-m-d H:i:s'),
            'referer' => isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : null,
            'http_user_agent' => array_get($_SERVER, 'HTTP_USER_AGENT'),
        ];
        return $aData;
    }

    public static function & getServiceInfoFromQueryResult(& $aResponses) {
        return $aResponses;
    }

}
